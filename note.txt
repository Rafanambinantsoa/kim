A -----
Rehefa anao anle validation par confirmation we mot de passe sy confirmer votre mot de passe
   <div class="form-group">
              <label for="password-register" class="text-muted mb-1"><small>Password</small></label>
              <input name="password" id="password-register" class="form-control" type="password" placeholder="Create a password" />
            </div>
    
            <div class="form-group">
              <label for="password-register-confirm" class="text-muted mb-1"><small>Confirm Password</small></label>
              <input name="password_confirmation" id="password-register-confirm" class="form-control" type="password" placeholder="Confirm password" />
            </div>


name = "password"
name = "password_confirmation"
tode fantatra ny laravel we io le izy


Rehefa ano anle unique koa (Tu peus le faire en multiple)
'email' => ['required' , 'Rule::unique('users' , 'email')']

B -----
CLés etrangère
            //ne peut pas creer un post si l'id  , 'xiste pas  et aussi supprimer les posts si l'utilisateur n'existe plus
            $table->foreignId('user_id')->constrained()->onDelete('cascade');

C -----
ANATY model
//fakana anle donner anaty cle etrangere
    public function cletrangere(){
        return $this->belongsTo(User::class,'user_id');
    }
}


Ary amin vue 
//pour l'afficher 
<p class="text-muted small mb-4">
            <a href="#"><img class="avatar-tiny" src="https://gravatar.com/avatar/f64fc44c03a8a7eb1d52502950879659?s=128" /></a>
            Posted by <a href="#">{{$post->cletrangere->username}}</a> on {{$post->created_at}}
          </p>

//CREER UNE MESSAGE D'ERREUR PERSONNALISER dans les acces dans le route pour le Guest
Ouvre le fichier RedirectIfAuthenticated.php
Modifie le return redirect(RouteServiceProvider::HOME) en 
le return redirect(/)->with('error' ,'only guest can acces this route' )


//CREATION D'UN AUTRE AUTH , (comme toi qu s'est donner tant de male à securiser le route avec des role dans ton projet precedent)

- laravel make:middleware karim
- Mand ary amin le fichier creer  , de asina condition we tsy mahazao acces aminty route  ty raha tsy  feno le condition ato
-   if(auth()->check()){
            return $next($request)->with('error' , 'You are not allowed to access this page');
        }
        else{
            return redirect()->route('login');
        }

- Vita zay de sokafana le Kernel.php pour ajouter le nouveau middleware dans notre application
-protected $routeMiddleware = [
        'karimAuth' => \App\Http\Middleware\karimAuth::class,
    

    on ajoute ce truc et là tu es connecter mon pote

    Fa mbola tsy hay tsika fona le we manao login avec un autre table que le users

D -----

Pour utiliser le POLICY : 
C'est comme une sorte de testeur si l'utilisateur qui est connecter  à les persmissions de faire des update ou bien des delete 
en gros il sert à verifier ces persmissions là , par exemple dans notre cas précis elle verifie si l'id de l'utilisateur qui est connecter 
est le même que celui qui est dans le post  , si oui il affiche le bouton update et delete dans le blade sinon non 
voilà comment on fait 
1. 
laravel make:policy PostPolicy --model=Post 
2.
public function update(User $user, Post $post)
    {
        return $user->id === $post->user_id;
    }

    /**
     * Determine whether the user can delete the model.
     *
     * @param  \App\Models\User  $user
     * @param  \App\Models\Post  $post
     * @return \Illuminate\Auth\Access\Response|bool
     */
    public function delete(User $user, Post $post)
    {
        return $user->id === $post->user_id;

pour les verification citer dans l"explication

3.
Puis on doit se rendre dans LE fichier AuthServiceProvider ajouter ces ligne qui a pour but d'implementer la verification dans la method 
  */
    protected $policies = [
        Post::class => PostPolicy::class
        // 'App\Models\Model' => 'App\Policies\ModelPolicy',
    ];

4. 
Après on doit se rendre dans le blade en question et mettre en place la verification en question commen ça 
     @can('update', $post)
              <span class="pt-2">
                <a href="#" class="text-primary mr-2" data-toggle="tooltip" data-placement="top" title="Edit"><i class="fas fa-edit"></i></a>
                <form class="delete-post-form d-inline" action="#" method="POST">
                  <button class="delete-post-button text-danger" data-toggle="tooltip" data-placement="top" title="Delete"><i class="fas fa-trash"></i></button>
                </form>
              </span>
     @endcan

Et voilà le tour est joué  , salut Miora pour moi

E ------

Affichage de bouton update et delete pour le superadmin , genre il peut modifier ou supprimer les posts des autre utilisateur
tout en etant connecter à son propre compte , contrairement aux utilisateur simple il nepeut modifier que c'est qu'ils ont crrer 

1. 
Ajoute de l'element dans le migaration  , 'isAdmin' de form boolean et de valeur par default 0

2.
Specification dans le PostPolicy  ; 
 if($user->isAdmin === 1){
            return true;
        }
        return $user->id === $post->user_id;
    }

3. comme dans l'autre on verifie à l'aide du bailise can  dans le fichier blade

F ------

Pour restrendre l'acces à une route specifier pour l'admin tous simplement  

1. 
On se rendre dans le fichier AuthServiceProvider.php pour specifier le condition d'acces à ce route 
 public function boot()
    {
        $this->registerPolicies();

        Gate::define('visitAdminPages' , function($user){
            return $user->isAdmin === 1;
        });
    }
}

et ajouter le function ci dessus (par rapport à ton condition )

2.
Dans le fichier web.php  
 voilà un exemple pour restrendre le route  

//Amin gate pages 
Route::get('/admins-only' , function(){
    return "Only admin should see this pages ";
})->middleware('can:visitAdminPages');

asina anle middleware zany le izy 
G ------

5.Recuperation des donnner à l'aide des cle etrangere   , dans notre cas precis  , on vas le faira comme
Recuperer tous les post que l'utilisateur etant connecter a creer 
1.
//cle etrangère fi recuperena anle tous les blogs ce la personne en question a fais 
    public function posts(){
        return $this->hasMany(Post::class,'user_id');
    }
Un utilisateur peut avoir plusieurs posts (hasMany)
2.
Et puis dans le Usercontroller
        $blogs = $user->posts()->latest()->get();
Et voilà comment on fait  salut mon pote


H -----
UPLOAD IMAGE SIMPLE 
1. 
Côtés Controller 
 public function storeAvatar(Request $request){
        $request->file('avatar')->store('avatars');

        return "its was saved successfully";
    }

2.
On doit lancer cette commande pour relier le dossier public avec l'autre dossier public dans le dossier storage/public/avatars 
laravel storage:link 

3.
Et donc le chemin pour accéder à cette image dans les fichier blade devrait être comme ça  


4. 
Pour specifier la taille maximale d'un image à uploader  , il faut se rendre dans  le fichier php.ini 
puis rechercher (ctrl+F) == upload_max_filesize = 2M  , puis modifier à votre aise 
la taile par défault  est  2M  ;  


I --------

//Une fonction qui retourne le liend l'image dynamiquement 
    protected function avatar():Attribute{
        return Attribute::make(get:function($value){
            return $value? '/storage/avatars/'.$value.'.jpg' : '/fallback-avatar.jpg';
        });
    }

    On le met dans le model USER 
    puis on l'appel dans le imgsrc comme 
    auth()-user()-avatar 

    et voilà l'image est afficher

J --------

Pour supprimer un image dans le dossier storage  ; ça peut te servir pour les uploads d'image
Storage::delete(str_replace('/storage/','/public',  $oldImg));


K ------- 
Deux manières de creer des relations CLES etrangere

public function up()
    {
        Schema::create('follows', function (Blueprint $table) {
            $table->id();
            //TODE direct
            $table->foreignId('user_id')->constrained();

            //on cree le column et aprés son caractériqtique
            $table->unsignedBigInteger('followeduser');
            $table->foreign('followeduser')->references('id')->on('users');
            $table->timestamps();
        });
    }

L -------
Quelque chose qui vas t'aider dans la Bootstrap avec les Classe active (comme dans les Dashboard )

1. 
        <div class="profile-nav nav nav-tabs pt-2 mb-4">
            <a href="/profile/{{$username}}" class="profile-nav-link nav-item nav-link {{ Request::segment(3) == "" ? "active" : ""}} ">Posts: {{ $blogsCount }} </a>
            <a href="/profile/{{$username}}/followers" class="profile-nav-link nav-item nav-link {{ Request::segment(3) == "followers" ? "active" : ""}}">Followers: 3</a>
            <a href="/profile/{{$username}}/followings" class="profile-nav-link nav-item nav-link {{ Request::segment(3) == "followings" ? "active" : ""}}">Following: 2</a>

2.
explication :::
{{ Request::segment(3) == "followers" ? "active" : ""}} === ce code veut dire que si dans le 3eme est egale à followers  la classe active sera ajouter dans la classe
sinon on ne fait rien

M ------
PAGINATION AUTO EN LARAVEL  
1. 
À la fin du rêquete  au lieu de get on utlise  paginate(nombre de resultat à afficher) 

2. 
Dans le fichier blade , on appel just la methode $post-links() pour generer le bouton de pagination 

3. 
Pour utiliser BS5  , on vas dans le fichier AppServiceProvider puis dans la fonction boot et on ajoute Paginator::useBootsrapFive() 


N ----------
RECHERCHE EN LARAVEL 
1. 
composer require laravel/scout 

2.
laravel vendor:publish --provider="Laravel/Scout/ScoutServiceProvider"

3. 
Dans le model POST  , on ajoute les 
class Post extends Model
{
    use HasFactory;
    use Searchable; ====
et aussi son namespace 
use Laravel\Scout\Searchable;

4. 
Dans notre Controller 

public function recherche($term){
        $kim = Post::search($term)->get();
        return $kim;
    }

De vita ny chocolat 

O ------ 
Génerer un event et un listener  en laravel 

1. 
se rendere dans le fichier EventServiceProvider  ; 
 2.
 Creer notre event et listener dans la fonction  
 protected $listen = [
        OurExampleEvent::class => [
            OurExampleListener::class,
        ], 

2.
Puis inserer son namespace en haut en tapant 
 use App\Event\OurExampleEvent
 use App\EventListener\OurExampleListener

3.
Puis il faut le generer  , par laravel event:generate 


P --------
Exemple d'utilisation d'un Event ('Affichage de se ce qui s'est connecter ou se deconnecter')  

1.
Dans notre controller on doit passer des variables et aprés l'afficher dans notre debug (laravel.log)
event(new OurExampleEvent([
                'username' => auth()->user()->username , 
                'action' => 'login' 
            ]));

2.
Pour l'afficher ; (Ouvre le fichier OurExampleEvent )
dans la  fonction __constructon ajoute 
public function __construct($variables)
    {
        $this->username = $variables['username'];
        $this->action = $variables['action'];
    }

3.
Ouvre le fichier listener  pou l'afficher dans notre laravel.log 
    public function handle(OurExampleEvent $event)
    {
        Log::debug("Salut , {$event->username} vient de se {$event->action}");
    }

voilà et à chaque fois que l'utilisateur se connecte ou de deconnecte  , le log affichera toujours un message 


Q ----------
CHAT EN LARAVEL 

1.
On doit creer un event dans la commande en tapant  , larave make:event kimEvent

2.
Puis dans cette event fraichement creer  , on doit ajouter les donner qu'on doit recevoir dans la fonction __construct
genre 

public function __construct($chat)
    {
        $this->chat = [
            'username' => $chat['username'],
            'textvalue' => $chat['textvalue'] , 
            'avatar' => $chat['avatar'] 
        ];
    }

3.
Puis  , on doit choisir le nom de channel pour traiter les condition d'adhésion dans cette chat (encore dans le event)
    public function broadcastOn()
    {
        return new PrivateChannel('chatchannel');
    }

4.
Après on doit se rendre dans le fichier 
channels.php  pour creer genre comme une nouvelles routes mais ce qu'on doit creer c'est un channel 
qui verifie sile user est authenticated 
Broadcast::channel('chatchannel', function () {
    if(auth()->check()){
        return true;
    }
    return false;
});


5.
Bien évidement on doit creer une route dans le web.php  qui a pour but (comme une sorte d'api) de poster les messages 
dans notre pusher 

//Chat related routes 
Route::post('/send-chat-message' ,  function(Request $request){
    $formFields = $request->validate([
        'textvalue' => 'required'
    ]);

    if(!trim(strip_tags($formFields['textvalue']))){
        return response()->noContent();
    }

    broadcast(new ChatMessage([
        'username' => auth()->user()->username,
        'textvalue' => $formFields['textvalue'] , 
        'avatar' => auth()->user()->avatar
    ]) );
    return response()->noContent();
})->middleware('karimAuth');


6.
On doit decommenter ce truc la dans app.php 
        App\Providers\BroadcastServiceProvider::class,

7.
Et puis dans bootstrap.js on doit decommenter ce truce là  ,suivant cette comment apres npm install laravel-echo pusher.js
(qui S'ocuppe com  chat server laravel en ligne )
import Echo from 'laravel-echo';

import Pusher from 'pusher-js';
window.Pusher = Pusher;

window.Echo = new Echo({
    broadcaster: 'pusher',
    key: import.meta.env.VITE_PUSHER_APP_KEY,
    cluster: import.meta.env.VITE_PUSHER_APP_CLUSTER,
    wsHost: import.meta.env.VITE_PUSHER_HOST ? import.meta.env.VITE_PUSHER_HOST : `ws-${import.meta.env.VITE_PUSHER_APP_CLUSTER}.pusher.com`,
    wsPort: import.meta.env.VITE_PUSHER_PORT ?? 80,
    wssPort: import.meta.env.VITE_PUSHER_PORT ?? 443,
    forceTLS: (import.meta.env.VITE_PUSHER_SCHEME ?? 'https') === 'https',
    enabledTransports: ['ws', 'wss'],
});


8.
voilà ça devrait marcher 
EN fait làj'aimserais donner une sorte de chemein de notre donnee  
-Primos dans le côter js (comme front qui envoie le donée depuis axios avec notre route laravel  )
-Notre route le recois et fais les verification 
-Puis le balance dans notre event  chatMessage
-Apres si le channel retoiurne true  , il doit il doit envoie le message à tous ceux qui sont connecter 
-et c'est le js qui s'onccupe de recevoir ces message et le partager 
voilà 


R -----------------
LA PAGE NE LOAD PAS QUAND ON SZITCHE ENTRE FOLLOWERS  , POST , FOLLOWING , 
here how we do it 

1.
c'est le profile.js qui fais genre il utilise les les route qui sont grouper à l'interieur du middleware 
cache.headers:public;max_age=20;etag petit traduction === les donnee venant des BD seront charger dans le cache du serveur pendant 20s
comme il y a moins de bandwith utiliser 

2. 
comme je l'ai dit c'est le profile qui tout lz bouleau  , il assure le changement du titre (en haut)
mais aussi le contenu des follower , post  , followings , san loader la page  , avec les 3 methode avec RAW



S --------------
En fait  ,  le laravel job(queue ) sert à tourner un sorte de requete en background  dans laravel  voyons par exemple 
dans notre PostController on l'as utiliser pour envoyer des emails  , 
dans notre premier methode on juste ecrit le code qui permet d'envoyer un email directement dans cette controller 
cela provoque un chargment de page trop lente car l'user doit creer un post et il y a aussi l'envoie de email auto 
Donc en gros laravel tourne ces 2 fonctionnalite en parallele , et quand un utilisateur creer un post 
il sera rediriger vers son post fraichement creer 
et l'envoie de mail auto tourne en arriere plan et méme si çca prend de temps l'user auras déja accces à son post 
voilà 
Poour ce faire , il faut suivre ces étapes 

1. 
laravel make:queue SendNewEmail 

2.
Dans la fonction handle on ajoute l'action à faire et aussi les donner recupere dans le controller 

  public function __construct($data)
    {
        $this->data = $data;
    }

    /**
     * Execute the job.
     *
     * @return void
     */
    public function handle()
    {
        Mail::to('tsukasashishiosama@gmail.com')->send(new NewPostEmail([
            'name' => $this->data['name'] , 
            'post_name'=> $this->data['post_name']
        ]));
    }


3.
Dans le controller , on doit l'appeler comme ce-ci 

dispatch(new SendNewEmail([
            'name' => auth()->user()->username,
            'post_name' => $data['title'] , 
        ]));

4.
Dans le fichier .env  , on doit changer 
QUEUE_CONNECTION=sync
en
QUEUE_CONNECTION=database

5.
Creer son migration dans la BD 
laravel queue:table
ET aussi le migrer apres 
laravel migrate

6.
On doit le demarer comme
laravel serve 
mais juste comme ça ::
laravel queue:work 

À chaque fois  , qu'un user creer un post 
l'envoie d'email auto et la creation du post se fera en parallele 


T ----------

Laravel Envoie Email Auto ou  pas des email tout simplement autre chose que l'email 
mais dans cette exemple on doit vas envoyer unse sorte de recapitilation des 
nombre des users et post  chaque minute par email 

1.
Creer le view (pour l'email)
laravel make:mail MailRecap 

2.
Se rendre dans le fichier Kernel (console) 
protected function schedule(Schedule $schedule)
    {
        $schedule->call(function (){
            Mail::to('tsukasashishiosama@gmail.com')->send(new RecapEmail());
        })->everyMinute();
        // $schedule->command('inspire')->hourly();
    }

    cette fonction permet d'envoyer un email chaque minute à tsukasashishiosama@gmail.com 

Et voilà

U -------
Le cache  , pour l'Affichage de nombre de post dans la page d'accueil  , elle est stocjer dans le cache du 
navigateur pendant 20s , regarde dans le controller Usercontroller
